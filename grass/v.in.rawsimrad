#! /bin/sh
#
############################################################################
#
# MODULE:        v.in.rawsimrad for Grass 6.3
# 
# AUTHOR:   	 Eric Patton, Geological Survey of Canada (Atlantic) 
# 
# PURPOSE:       This program extracts navigation data (x,y,and timestamp)
#		 from a Simrad rawdata .all files and imports it into Grass GIS
#		 vector format.	
# 
# COPYRIGHT:     Copyright (C) 2007 by Eric Patton
#
#                This program is free software under the GNU General Public
#                License (>=v3). Read the file COPYING that comes with GRASS
#                for details.
# 
# Last Modified: October 5, 2007
# 
#############################################################################

# TO-DO: The current version removes temp files during each iteration of the for loop.
# I'm doing this to try to conserve space on my removable disk, which is almost full.
# In the future, remove these rm calls and place them outside the loop in the cleanup
# section of the script.

#%Module
#% description: Extracts navigation from Simrad raw files and imports into Grass vector format
#%END

#%option
#% key: rootpath
#% type: string
#% description: The root pathname of the project directory containing Simrad rawdata
#% required: yes
#%END

#%option 
#% key: cruise_id
#% type: integer
#% description: The survey ID
#% required: yes
#%END

#%option
#% key: vessel_id
#% type: string
#% description: The vessel name
#% required: yes
#%END

SCRIPT=`basename $0`

if  [ -z "$GISBASE" ] ; then
    echo -e "\nYou must be in GRASS GIS to run this program." 2>&1
    exit 1
fi

if [ "$1" != "@ARGS_PARSED@" ] ; then
     exec g.parser "$0" "$@"
fi

# Capture CTRL-C and similar breaks.
trap 'echo -e "\n\nUser break! Exiting.\n" ; exit 1' 2 3 15

# Check if we have awk.
if [ ! -x "`which awk`" ] ; then
    echo "$SCRIPT: awk required, please install awk or gawk first" >&2
    exit 1
fi

# Setting environment, so that awk works properly in all languages.
unset LC_ALL
export LC_NUMERIC=C

# Rename input variable.
ROOTPATH=$GIS_OPT_rootpath
CRUISE_ID=$GIS_OPT_cruise_id
VESSEL_ID=$GIS_OPT_vessel_id

cd ${ROOTPATH}


NUMBER_OF_DAYS=`ls -1p | grep /$ | wc -l`
ls -1p | grep /$ | sed 's/\/$//' > DAYLIST.txt

for ((i=1; i<=$NUMBER_OF_DAYS; i++)) ; do

	DAY=`awk -v counter=${i} 'NR==counter {print $1}' DAYLIST.txt`
	echo -e "\n\nProcessing navigation in day $DAY..."
	cd $DAY

	for RAWFILE in `ls -1 *.all` ; do

		echo -e "\nProcessing rawdata file $RAWFILE in $DAY...\n"
		
		mbnavlist -I${RAWFILE} -OJXY -N0 | awk '{
if ((int($5)) < 10) FORMATTED_TIME = 0int($5) 
else FORMATTED_TIME = int($5)
if (TIME == FORMATTED_TIME) next 
else { print $6, $7, $2$3$4FORMATTED_TIME
TIME = FORMATTED_TIME
}}' > TMP_${RAWFILE}_LL.txt 

		proj +proj=utm +ellps=WGS84 +datum=WGS84 +zone=20 < TMP_${RAWFILE}_LL.txt | awk '{print $1, $2, $3}' > TMP_${RAWFILE}_UTMs.txt
		
		rm TMP_${RAWFILE}_LL.txt
		
		echo -e "\nFinished formatting navigation dump from mbnavlist. Importing into Grass vector format via v.in.ascii...\n"
	
		v.in.ascii -t input=TMP_${RAWFILE}_UTMs.txt format=point fs=space cat=3 output=${VESSEL_ID}_`echo ${RAWFILE} | sed s/_${VESSEL_ID}// | tr '.' '_'` --o
		
		rm TMP_${RAWFILE}_UTMs.txt	
	
	done
	
	cd ../

	echo  -e "\nPatching rawdata lines together...\n"
	
	v.patch input=`g.mlist sep=, type=vect pattern=${VESSEL_ID}_*all` output=${VESSEL_ID}_${CRUISE_ID}_`echo ${DAY} | sed 's/-/_/g'`_nav --o
	echo ""	
	g.mremove vect=${VESSEL_ID}_*all -f

done

# Cleanup
rm -f DAYLIST.txt

exit 0



















































