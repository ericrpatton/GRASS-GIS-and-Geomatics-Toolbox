#! /bin/bash
#
############################################################################
#
# MODULE:        v.in.boundingbox for Grass 7
# 
# AUTHOR:   	 Eric Patton, Geological Survey of Canada (Atlantic) 
# 
# PURPOSE:       This program takes ethier a) a list of bounding box coordinates
#				 from the command line, b) the current Grass region, or c) an MB-System
#				 datalist region and imports them as a Grass vector polygon. A centroid, and
#			     table with cat and Name columns is added as well.	
# 
# COPYRIGHT:     Copyright (C) 2007-2022 by Eric Patton
#
#                This program is free software under the GNU General Public
#                License (>=v3). Read the file COPYING that comes with GRASS
#                for details.
# 
# Last Modified: February 1, 2022
# 
#############################################################################
#
#%Module
#% description: Creates a vector polygon from a user-provided region
#%END

#%flag
#% key: g 
#% description: Obtain the min/max bounding box coordinates from g.region, not by prompt
#%END

#%flag
#% key: i
#% description: Obtain min/max coordinates from a MB-System datalist
#%END

#%flag
#% key: r 
#% description: Create a raster from the vector bounding box
#%END

#%option 
#% key: boundingbox
#% type: string
#% gisprompt: new,vector,vector 
#% required: yes
#% description: Output vector polygon name
#%END

#%option 
#% key: datalist
#% type: string
#% gisprompt: old_file, file, input
#% required: no
#% description: name of MB-System datalist to use for coordinates in current dir
#%END

#%option 
#% key: resolution
#% type: integer
#% required: no 
#% answer: 30
#% description: Resolution of raster bounding box (used with -r flag)
#%END

if  [ -z "$GISBASE" ] ; then
    echo "You must be in GRASS GIS to run this program."
    exit 1
fi

if [ "$1" != "@ARGS_PARSED@" ] ; then
     exec g.parser "$0" "$@"
fi

SCRIPT=$(basename $0)
BOUNDINGBOX=$GIS_OPT_boundingbox
DATALIST=$GIS_OPT_datalist

# Define cleanup procedures
cleanup()
{
	rm bounding_coords.txt
	rm bounding_coords_clean.txt
}

exitprocedure()
{
	echo -e "\n\nUser break! Exiting.\n"
	cleanup
}

# Capture CTRL-C and similar breaks.
trap 'exitprocedure ; exit 1' 2 3 15


# Check if we have awk.
if [ ! -x "`which awk`" ] ; then
    echo "$SCRIPT: awk required, please install awk or gawk first." >&2
    exit 1
fi

# Check if we have proj.
if [ ! -x "`which proj`" ] ; then
	echo "$SCRIPT: proj4 required, please install proj first." >&2
	exit 1
fi

# Setting environment, so that awk works properly in all languages.
unset LC_ALL
export LC_NUMERIC=C

if [ "$GIS_FLAG_g" -eq 1 ] ; then	
	# Get the bounding box coordinates from g.region; the coordinates thus
	# obtained will be in projected units, *not* lat-long.
	
	eval $(g.region -pg)
	: ${w?} ${e?} ${s?} ${n?}

	WEST=${w}
	EAST=${e}
	SOUTH=${s}
	NORTH=${n}
	
	echo "$WEST $SOUTH" > bounding_coords.txt  
	echo "$WEST $NORTH" >> bounding_coords.txt
	echo "$EAST $NORTH" >> bounding_coords.txt
	echo "$EAST $SOUTH" >> bounding_coords.txt
	echo "$WEST $SOUTH" >> bounding_coords.txt
	
elif [ "$GIS_FLAG_i" -eq 1 ] ; then
	# Use mb.getinforegion to get the max and min lat-long coordinates from an
	# MB-System datalist. The datalist must be in the current directory of the shell.
	INFO_COORDS=$(mb.getinforegion ${DATALIST})
	WEST=$(echo $INFO_COORDS | cut -d'/' -f1)
	EAST=$(echo $INFO_COORDS | cut -d'/' -f2)
	SOUTH=$(echo $INFO_COORDS | cut -d'/' -f3)
	NORTH=$(echo $INFO_COORDS | cut -d'/' -f4)

	echo -e "Projecting bounding coordinates to local Grass projection...\n"
	proj $(g.proj -jf) <<EOF > bounding_coords.txt
$WEST $SOUTH
$WEST $NORTH
$EAST $NORTH
$EAST $SOUTH
$WEST $SOUTH
EOF

else 
	# Prompt the user for lat-long bounding coordinates
	echo ""
	echo "You will be prompted for the bounding box coordinates; "
	echo "Include negative signs for any vertex, if applicable."
	echo ""
	read -p "Enter the maximum west longitude: " WEST
	read -p "Enter the maximum east longitude: " EAST
	read -p "Enter the maximum south latitude: " SOUTH 
	read -p "Enter the maximum north latitude: " NORTH

proj `g.proj -jf` <<EOF > bounding_coords.txt
$WEST $SOUTH
$WEST $NORTH
$EAST $NORTH
$EAST $SOUTH
$WEST $SOUTH
EOF

fi

# Format the coordinates the way v.in.ascii expects them
awk 'BEGIN {print "B 5 1"} {print " "$1, $2} END {print "1 1"}' bounding_coords.txt > bounding_coords_clean.txt

# Import to Grass vector format.
echo -e "Importing boundingbox coords to vector format...\n"
v.in.ascii -n input=- output=${BOUNDINGBOX} format=standard sep=space < bounding_coords_clean.txt

# Add centroids to new bounding box
v.centroids input=${BOUNDINGBOX} output=TEMP --o --q
g.remove type=vect name=${BOUNDINGBOX} -f --q
g.rename vect=TEMP,${BOUNDINGBOX} --q

# Add an attribute table to the vector, so we can have a Name column for use in labelling
v.db.addtable map=${BOUNDINGBOX} columns="cat integer, Name varchar(20)" --q

if [ "$GIS_FLAG_r" -eq 1 ] ; then
	echo ""
	RES=$GIS_OPT_resolution
	g.region vect=${BOUNDINGBOX} res=${RES}

	# Use eval to capture Grass environment vaiables like the current MAPSET.
	eval $(g.gisenv)
	: ${MAPSET?}

	# Check to see if the raster boundingbox already exists. 
	eval $(g.findfile element=cell mapset=${MAPSET} file=${BOUNDINGBOX}_rast) 
	: ${file?}

	if [[ -z ${file} ]] ; then
	
		echo -e "\nRasterizing input vector bounding box...\n"
		v.to.rast input=${BOUNDINGBOX} output=${BOUNDINGBOX}_rast use=val val=1 mem=20000  
	
		[[ $? -eq 1 ]] && echo -e "\nError: $SCRIPT: v.to.rast conversion failed! Perhaps the region is too big?" && exit 1 || echo -e "\nProduced a raster map ${BOUNDINGBOX}_rast from incoming vector map ${BOUNDINGBOX}.\n"
	fi
fi

# Cleanup
cleanup

echo -e "\n$SCRIPT done."

exit 0
