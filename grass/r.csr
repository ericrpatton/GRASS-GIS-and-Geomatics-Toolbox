#! /bin/bash 
#
############################################################################
#
# MODULE:        r.csr for Grass 7.*
# 
# AUTHOR:   	 Eric Patton, Geological Survey of Canada (Atlantic)
#		 		 <Eric dot Patton at Canada dot ca>
# 
# PURPOSE:       To allow the batch creation of coloured, shaded-relief 
#		 		 Grass rasters, optionally with tiff export. Uses 
#				 (modifiable) shading defaults of 45alt, 315az, 10x. 
# 
# COPYRIGHT:    (c) 2006-2021 by Eric Patton
#
#                This program is free software under the GNU General Public
#                License (>=v3). Read the file COPYING that comes with GRASS
#                for details.
# 
# Last Modified: January 25, 2021
#	by Author
#	
# CHANGELOG:	- Added code to ensure the resolution returned from g.region is
#               integer-only
#				- Removed the g.list for loop code (01-25-2021)
#				- Updated parameter names to conform to Grass 7 usage     (06-22-2015)
#				- Corrected the g.findfile SHADEMAP check for the -b flag (01-19-2016)	
#				- Added new -d flag to export raw data as geotiff; improved
#				compatibility of exported geotiffs for viewing in ArcMap
#				(01-26-2016)
#				- updated r.mapcalc calls to use overwrite (--o) flags by
#				default (03-30-2017)
#				- Greatly simplified the script by removing all sections of
#				code that tried to do exit code and error massaging for Grass
#				functions.  Leaving that to the parser. (3-30-2017)
#				- Removed a lot of cruft in the coloring section of the script
#				that used ugly kluges to get around limitations in Grass 6
#				architecture. Also removed dithering from r.composite call (3-30-2017)
#############################################################################
#
#%Module
#% description: Single or batch creation of coloured, shaded-relief rasters, with optional tiff export. 
#%END

#%flag
#% key: a 
#% description: Export ESRI Arc ascii grid of input DEM
#%END

#%flag
#% key: d 
#% description: Export 32-bit geotiff of input DEM
#%END

#%flag
#% key: m
#% description: Median filter raster using 3x3 window.
#%END

#%flag
#% key: b
#% description: Bypass shaded-map creation (still expects a shade map named MAP_shade).
#%END

#%flag
#% key: r
#% description: Export region is set by g.region, not input raster extents.
#%END

#%flag
#% key: s
#% description: Export 16-bit (UInt16) geotiff of shaded-relief raster.
#%END

#%flag
#% key: t
#% description: Export 16-bit (UInt16) geotiff of coloured, shaded-relief raster.
#%END

#%option 
#% key: input
#% type: string
#% gisprompt: old,cell,raster
#% required: yes
#% description: Input raster filename or wildcard seach pattern
#%END

#%option 
#% key: resolution
#% type: integer
#% required: no 
#% description: Output resolution of colored, shaded relief raster
#%END

#%option
#% key: shademap
#% type:string
#% required: no
#% gisprompt: old,cell,raster
#% description: Name of raster map to use for shaded-relief (overrides -b flag)
#%END

#%option
#% key: passes
#% type: integer
#% required: no
#% answer: 1
#% description: With -m flag enabled, number of times to repeat median filter 
#%END

#%option
#% key: altitude
#% type: integer
#% required : no
#% answer: 45
#% description: Altitude of the sun in degrees above the horizon (must be 1-89)
#%END

#%option
#%  key: azimuth
#%  type: integer
#%  description: Azimuth of the sun in degrees to the east of north (must be 0-360)
#%  required : no
#%  answer: 315
#%END

#%option
#%  key: zscale    
#%  type: double
#%  description: Factor for exaggerating relief (default=5)
#%  required : no
#%  answer: 5
#%END

#%option
#%  key: scale
#%  type: string
#%  description: Set scaling factor (for lat-long locations, scale=111120; default: scale=1)
#%  required : no
#%  answer: 1
#%END 

#%option
#% key: colormap
#% type: string
#% gisprompt: old,cell,raster
#% description: Name of another raster in current mapset to copy color table from
#% required: no
#%END

#%option
#% key: rules
#% type: string
#% description: Name of rules file in current directory containing rules for color table
#% required: no
#%END

if  [ -z "$GISBASE" ] ; then
    echo "You must be in GRASS GIS to run this program."
    exit 1
fi

if [ "$1" != "@ARGS_PARSED@" ] ; then
     exec g.parser "$0" "$@"
fi

SCRIPT=$(basename $0)

# Define cleanup procedures

cleanup()
{
	echo "Removing temporary files if they exist:"

	for FILE in $RED $GREEN $BLUE fill.tmp ; do

		# The R/G/B files get written to the CELL directory, but most rasters
		# we use will be FCELL, so we need to check for both in the cleanup().
		if [ -f ${GISDBASE}/${LOCATION_NAME}/${MAPSET}/fcell/${FILE} -o -f ${GISDBASE}/${LOCATION_NAME}/${MAPSET}/cell/${FILE}  ] ; then
			
			g.remove -f type=rast name=${FILE} 
		fi	
	done
	
	echo -e "\n--------------------------------------\n"
} 

exitprocedure()
{
	echo -e "\n\nUser break or similar caught; Exiting.\n" 
	cleanup	
}

# Setup clean exit for Ctrl-C or similar breaks. (See trap -l for list of exit
# codes)

trap 'exitprocedure ; exit 1' 2 3 15

# Capture environment variables.
eval `g.gisenv`
: ${GISDBASE?} ${LOCATION_NAME?} ${MAPSET?}

ALTITUDE=$GIS_OPT_altitude
AZIMUTH=$GIS_OPT_azimuth
ZSCALE=$GIS_OPT_zscale
SCALE=$GIS_OPT_scale
INPUT=$GIS_OPT_input
RULES=$GIS_OPT_rules
COLOR_MAP=$GIS_OPT_colormap
SHADEMAP=$GIS_OPT_shademap
PASSES=$GIS_OPT_passes
COLOR_DIR=colr
RESOLUTION=$GIS_OPT_resolution

	
##########################################
#       REGION DETERMINATION SECTION
##########################################

# If the raster resolution is not explicitly given, use r.info to extract
# the native resolution of the input raster. 

if [ -z "$RESOLUTION" ] ; then
	
	eval `r.info -g $INPUT`
	: ${ewres?} ${nsres?}
	
	RESOLUTION=$(echo $ewres | awk '{printf "%d\n", $1}')
fi

g.region -a res=$RESOLUTION 

# Check for the presence of -r flag to determine if the export region
# should be a subset of the maximum extent of each input raster. The
# resolution set by RESOLUTION parameter is still respected, if -r flag is
# used.  If the -r flag is NOT passed, the default behavior will be to set
# the region to the maximum extent of each raster in turn.

if [ "$GIS_FLAG_r" -eq 0 ] ; then

	g.region -a rast=$INPUT res=$RESOLUTION
fi
	

echo -e "\n\n\n======================================"
echo -e "\n$SCRIPT"
echo -e "\nProcessing input map $INPUT..."


###########################################
# PROCEDURES FOR MEDIAN FILTERING (-m flag)
###########################################


if [ "$GIS_FLAG_m" -eq 1 ] ; then

	echo -e "\n\n--------------------------------------"
	echo -e "\nFilling Null Values"
			
	# Procedure for filling nulls with multiple median filter passes
	if [ "$PASSES" -gt 1 ] ; then

		COUNT=1
		while [ "$COUNT" -le "$PASSES" ] ; do
			
			echo ""		
			
			fillnulls.sh ${INPUT}

			echo -e "Finished median filter pass #$COUNT..."
			
			COUNT=$(($COUNT + 1))

			# The default neighbourhood filter size in fillnull.sh is 3.
			INPUT=${INPUT}_fill3

		done

	else 
		
		echo ""

		fillnulls.sh ${INPUT}		
		INPUT=${INPUT}_fill3
	fi			

	echo "Finished median filtering."
		

fi

RED=${INPUT}_r
GREEN=${INPUT}_g
BLUE=${INPUT}_b
SHADE=${INPUT}_shade


##################################
# PROCEDURES FOR SHADING (-b flag) 		
##################################

# If $SHADEMAP is given, then use it as the shaded-relief map and combine it with 
# $INPUT. If $SHADEMAP is not given and -b is passed, bypass creating a shaded-relief
# from the input raster, and use a pre-existing map named $INPUT_shade as the shaded-relief map.
# If neither $SHADEMAP nor the -b flag are given, generate a shaded-relief map from scratch
# using the input raster. 	


echo -e "\n\n--------------------------------------"

# If -b is not given, use r.relief to create a shade map.
if [ "$GIS_FLAG_b" -eq 0 ] ; then
    echo -e "\nr.relief\n"
	
	r.relief --v --o input=${INPUT} output=${SHADE} altitude=${ALTITUDE} azimuth=${AZIMUTH} zscale=${ZSCALE} scale=${SCALE}

else 	# The -b flag was passed; so we will not create a shaded-relief
		# map from scratch, but use $SHADEMAP if it was given.

	if [ -n "$SHADEMAP" ] ; then 
		SHADE=${SHADEMAP}

	else	
		# Check if $INPUT_shade already exists in the MAPSET, since the -b
		# flag was passed, and no $SHADEMAP parameter was given.

		eval `g.findfile element=cell mapset=$MAPSET file=${SHADE}` 
		: ${file?}
		
		SHADE_CHECK=$file

	
		echo -e "\nThe shaded-relief option has been skipped (-b flag). Note that"
		echo -e "r.his still expects a shaded-relief file named ${SHADE} to"
		echo -e "combine with the colour map ${INPUT}."
		echo -e "\nChecking if shade map already exists..."
		
		if [ -n "$SHADE_CHECK" ] ; then
			echo -e "Shade map $SHADE found."
			
		else
			echo -e "\n$SCRIPT: Error: No shade map found!"
			echo "r.csr -b expects an existing shade map named ${SHADE} in the current MAPSET."
			echo -e "Disable -b flag to continue." 
			exit 1
		fi
	fi
fi	


echo -e "\n\n--------------------------------------"
echo -e "\nCombining colours with shade - r.his and r.composite\n"
echo -e "\nCreating new csr maps...\n"


####################################################
# PROCEDURES FOR ASSIGNING COLOR TABLES TO INPUT MAP
####################################################

# Check if color rules file or existing raster colormap is specified.

if [ -z "$RULES" -a -z "$COLOR_MAP" ] ; then
	
	# Check whether the input raster map has colour table; if not, assign
	# a default rainbow colour table.
	if [ ! -f ${GISDBASE}/${LOCATION_NAME}/${MAPSET}/${COLOR_DIR}/${INPUT} ] ; then
		
			echo "Pre-existing color map for ${INPUT} not found"
			echo "and neither rules nor colormap parameters given."
			echo -e "Defaulting to rainbow colormap...\n"
			
			r.colors map=${INPUT} color=bcyr

	fi

# Copy the color table of another raster if COLOR_MAP parameter is given.
elif [ -n "$COLOR_MAP" ] ; then

	r.colors map=${INPUT} rast=${COLOR_MAP} 

elif [ -n "$RULES" ] ; then

	#Use the color table specified in a rules text file in the current directory.
	cat ${RULES} | r.colors map=${INPUT} rules=${RULES}
fi	

#####################################
# COMBINATION OF COLOR AND SHADE MAPS
#####################################

# Color map and shade map get combined in this step.

r.his --v --o hue=${INPUT} intensity=${SHADE} red=${RED} green=${GREEN} blue=${BLUE}

COMBINED=${INPUT}_shade_comb

# Merging RGB maps.

r.composite --o red=${RED} green=${GREEN} blue=${BLUE} output=${COMBINED} 

echo -e "\n--------------------------------------\n"

##############################################
# EXPORTING OUTPUT - TIFFS AND ARC ASCII GRIDS
##############################################

# Procedures for exporting tiffs. The data types for tiff export as well as
# the null values used are hard-coded as they seem to work in ArcGIS 10.3
# as of February, 2016.

if [ "$GIS_FLAG_a" -eq 1 -o "$GIS_FLAG_d" -eq 1 -o "$GIS_FLAG_s" -eq 1 -o "$GIS_FLAG_t" -eq 1 ] ; then
	echo -e "\n--------------------------------------"
	echo -e "\nExport Section\n"
fi
	
# Procedure for exporting Arc ascii grid (-a flag):	
if [ "$GIS_FLAG_a" -eq 1 ] ; then
	echo -n -e "\n[-a flag] - Creating Arc ascii grid...standby.\n"
	
	r.out.gdal input=${INPUT} output=${INPUT}.asc format="AAIGrid" type=Float32 nodata=-99999 -f --v --o 
	echo ""
fi	

# Procedure for exporting a geotiff of the raw DEM raster (-d flag):
if [ "$GIS_FLAG_d" -eq 1 ] ; then
	echo -e "\n[-d flag] - Exporting geotiff of raw DEM raster...standby.\n"

	r.out.gdal input=${INPUT} output=${INPUT}.tif type=Float32 nodata=-99999 -f --v --o 
fi

# Procedure for exporting a geotiff of the shaded-relief map (-s flag):
if [ "$GIS_FLAG_s" -eq 1 ] ; then
		echo -e "\n[-s flag] - Exporting geotiff of shaded-relief raster...standby.\n"

		r.out.gdal input=${SHADE} output=${SHADE}.tif type=Int16 nodata=32767 -f --v --o 
		echo ""			
fi	

# Procedure for exporting a geotiff of the coloured, shaded relief raster (-t flag):
if [ "$GIS_FLAG_t" -eq 1 ] ; then
	echo -e "\n[-t flag] - Exporting geotiff of coloured, shaded-relief raster...standby.\n"

	r.out.gdal in=${COMBINED} output=${COMBINED}.tif type=UInt16 nodata=65535 -f --v --o
	echo ""
fi	

# CLEANUP
cleanup



exit 0
