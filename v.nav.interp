#!/bin/bash 
#
##################################################################################
#
# MODULE:       v.nav.interp for Grass 6
# 
# AUTHOR:   	Eric Patton, Geological Survey of Canada (Atlantic) 
# 				<epatton AT nrcan dot gc dot ca>
#
# PURPOSE:		Interpolates missing navigation positions in a survey trackline
#				given the start/end positions and known timestamps. It does not account
#				for currents or tides, and assumes a constant drift rate between start
#				and end points.	
#
# COPYRIGHT:    (C) 2007-2009 by Eric Patton
#
#               This program is free software under the GNU General Public
#               License (>=v3). Read the file COPYING that comes with GRASS
#	        	for details.
# 
# Last Modified: March 10, 2007
# 
#    
##################################################################################
#
# NOTE: This script expects all timestamps (from station start/end times, and photos)
#		to be 9-digits, composed of 3-digit julian day, 2-digit hour, 2-digit minute,
#		and 2-digit second.
#
#%Module
#% description: Interpolates missing navigation positions in a survey trackline. 
#%END

#%flag
#% key: a
#% description: Append Geographic coordinates in WGS84 datum to output table
#%END

#%option
#% key: input
#% type: string
#% gisprompt: old,vector,vector
#% description: Input vector point map to interpolate positions from
#% required : yes 
#%END

#%option
#% key: output
#% type: string
#% gisprompt: new,vector,vector
#% description: Name of output vector to write interpolated points to
#% required: no
#%END

#%option
#% key: cats
#% type: string
#% description: Start/End point category numbers (in the form of start,end)
#% required: yes
#%END

#%option
#% key: layer
#% type: integer
#% description: Layer of table with start/endpoint attributes
#% answer: 1
#% required : no
#%END

#%option
#% key: table
#% type: string
#% description: Name of table with start/end point attributes
#% required: no
#%END

#%option
#% key: time_col
#% type: string
#% description: Name of column in input table with timestamp records
#% required: yes
#% options: Timestamp,timestamp,TIMESTAMP
#% answer: Timestamp
#%END

#%option
#% key: east_col
#% type: string
#% description: Name of column in input table with easting coordinates
#% required: yes
#% options: Easting,easting,EASTING,East,east,EAST
#% answer: Easting
#%END

#%option
#% key: north_col
#% type: string
#% description: Name of column in input table with northing coordinates
#% required: yes
#% options: Northing,northing,NORTHING,North,north,NORTH
#% answer: Northing
#%END


#%option
#% key: list 
#% type: string
#% gisprompt: old_file, file, input
#% multiple: yes
#% description: Comma-separated values list of timestamps to interpolate positions for
#% required: yes
#%END

SCRIPT=`basename $0`

if  [ -z "$GISBASE" ] ; then
    echo -e "\nYou must be in GRASS GIS to run this program." 2>&1
    exit 1
fi

if [ "$1" != "@ARGS_PARSED@" ] ; then
     exec g.parser "$0" "$@"
fi

# Check if we have awk.
for i in `echo $PATH | sed 's/^:/.:/
	s/::/:.:/g
	s/:$/:./
	s/:/ /g'`
do
    if [ -f $i/awk ] ; then

	# Save the path of the command
	AWK_PATH=$i/awk
	# Use the first one in user's path
	break
    fi
done

# Setting environment, so that awk works properly in all languages.
unset LC_ALL
export LC_NUMERIC=C

# Rename input parameters.
INPUT="$GIS_OPT_input"
OUTPUT="$GIS_OPT_output"
TABLE="$GIS_OPT_table"
LAYER="$GIS_OPT_layer"
CATS="$GIS_OPT_cats"
LIST="$GIS_OPT_list"
TIME_COL="$GIS_OPT_time_col"
EAST_COL="$GIS_OPT_east_col"
NORTH_COL="$GIS_OPT_north_col"


# Check output parameter
if [  -z "$OUTPUT" ] ; then
	OUTPUT=${INPUT}_interp
fi

# Check list to see if the file exists in the current directory
if [ ! -f "$LIST" ] ; then
	echo -e "\n$SCRIPT: Error: There is no file matching $LIST in the current directory!" 2>&1
	exit 1
fi	

# If no table parameter is given, try to discover which table is connected to $INPUT
# based on what $LAYER value was given.

if [ -z "$TABLE" ] ; then
	TABLE=`v.db.connect map=$INPUT layer=$LAYER -g | cut -d" " -f2`
	if [ -z "$TABLE" ] ; then
		echo -e "\n$SCRIPT: Error: No database connected to $INPUT on layer $LAYER." 2>&1
		exit 1
	fi
fi

###################################
#	CHECK COLUMNS
###################################

# Check to see if a timestamp column exists 
TIME_CHECK=`v.db.connect -c map=$INPUT layer=$LAYER | grep "$TIME_COL" | cut -d"|" -f2`

if [ -z "$TIME_CHECK" ] ; then
	echo -e "\n$SCRIPT: Error: No column matching $TIME_COL found in database table." 2>&1
	exit 1
fi

# Check to see if easting/northing columns exist
EASTING_CHECK=`v.db.connect -c map=$INPUT layer=$LAYER | grep "$EAST_COL" | cut -d"|" -f2`
NORTHING_CHECK=`v.db.connect -c map=$INPUT layer=$LAYER | grep "$NORTH_COL" | cut -d"|" -f2`

if [ -z "$EASTING_CHECK" ] ; then
	echo -e "\n$SCRIPT: Error: No columns matching $EAST_COL exist in" 2>&1
	echo "the database table. Populate the table with this column using" 2>&1
	echo "v.db.addcol and v.to.db first." 2>&1
	exit 1

fi

if [ -z "$NORTHING_CHECK" ] ; then
	
	echo -e "\n$SCRIPT: Error: No columns matching $NORTH_COL exist in" 2>&1
	echo "the database table. Populate the table with this column using" 2>&1
	echo "v.db.addcol and v.to.db first." 2>&1
	exit 1
fi

# Make sure that categories are given in pairs (evenly divisible by two).
NUM_CATS=`echo "${CATS}" | awk 'BEGIN {FS=","} {print NF}'`
let "PAIRS_CHECK=${NUM_CATS} % 2"

if [ "$PAIRS_CHECK" -ne 0 ] ; then
	echo "$SCRIPT: Error: Start and end categories must be given in pairs only."
	exit 1
fi

let "NUMBER_OF_PAIRS=$NUM_CATS / 2"

for (( i=0; i<$NUMBER_OF_PAIRS; i++ )) ; do

	
	###################################
	#	CHECK CATEGORIES
	###################################

	# The variable i in the for loop above is a cat pair counter, so the field in the cat list 
	# that references the starting cat for any given pair is 2i+1, and the field for the ending cat
	# is 2i+2.

	let "START_CAT_FIELD = (2 * ${i}) + 1"
	let "END_CAT_FIELD = (2 * ${i}) + 2"

	START_CAT=`echo ${CATS} | cut -d"," -f${START_CAT_FIELD}`
	END_CAT=`echo ${CATS} | cut -d"," -f${END_CAT_FIELD}`

	# Check to see that given $CATS exist in the input vector table.

	START_CAT_CHECK=`echo "select * from ${TABLE} where cat=${START_CAT}" | db.select -c`
	END_CAT_CHECK=`echo "select * from ${TABLE} where cat=${END_CAT}" | db.select -c`

	if [ -z "$START_CAT_CHECK" ] ; then
		echo "$SCRIPT: Error: Vector with cat #$START_CAT does not exist in table $TABLE." 2>&1
		exit 1
	fi

	if [ -z "$END_CAT_CHECK" ] ; then
		echo "$SCRIPT: Error: Vector with cat #$END_CAT does not exist in table $TABLE." 2>&1
		exit 1
	fi

	# Cat the list to get number of timestamps required.
	LIST_LENGTH=`cat $LIST | awk -F, '{print NF}'`


	################################################
	#	CHECK TIMESTAMPS
	################################################

	# In order to be able to interpolate positions for intermediate times between the
	# start and end points, it's necessary that the start and end points have timestamps 
	# of their own. 
	START_TIME=`echo "select $TIME_COL from $TABLE where cat=$START_CAT" | db.select -c`
	END_TIME=`echo "select $TIME_COL from $TABLE where cat=$END_CAT" | db.select -c`


	###################################################
	#	CONVERT START/END TIMES TO SECONDS
	###################################################

	# First we have to convert the 9-digit Julian Day times into a number we can perform arithmetic on.	
	START_TIME_DAYS=`echo ${START_TIME:0:3}`
	START_TIME_HOURS=`echo ${START_TIME:3:2}`
	START_TIME_MINUTES=`echo ${START_TIME:5:2}`
	START_TIME_SECONDS=`echo ${START_TIME:7:2}`

	START_TIME_ALL_SECONDS=`echo "$START_TIME_SECONDS + ($START_TIME_MINUTES * 60) + ($START_TIME_HOURS *3600) + ($START_TIME_DAYS * 86400)" | bc -l`

	END_TIME_DAYS=`echo ${END_TIME:0:3}`
	END_TIME_HOURS=`echo ${END_TIME:3:2}`
	END_TIME_MINUTES=`echo ${END_TIME:5:2}`
	END_TIME_SECONDS=`echo ${END_TIME:7:2}`

	END_TIME_ALL_SECONDS=`echo "$END_TIME_SECONDS + ($END_TIME_MINUTES * 60) + ($END_TIME_HOURS *3600) + ($END_TIME_DAYS * 86400)" | bc -l`

	TRANSECT_DURATION_SEC=$(($END_TIME_ALL_SECONDS - $START_TIME_ALL_SECONDS))

	# Now check the timestamp values themselves to see if they fall within the
	# timestamps of the start and end points.

	IFS=","

	for TIMESTAMP in `cat $LIST` ; do
		
		if [ "$TIMESTAMP" -gt "$END_TIME" -o "$TIMESTAMP" -lt "$START_TIME" ] ; then
			echo -e "\n$SCRIPT: Error: Timestamp <$TIMESTAMP> in $LIST falls outside of start time $START_TIME and end time $END_TIME." 2>&1
			exit 1
		fi
	
	done


	##################################################################
	#	CREATE ARRAYS FOR TIMESTAMPS AND TIME FACTORS
	##################################################################

	# The Time Factor is the relative percent of a given timestamp compared to the 
	# difference bewteen the start and endpoint timestamps. (SOL = %0, EOL = %100)
	# Ex: (Input_point - Start_Point)/(End_point_time - Start_point_time)
	
	for ((  i=1; i<="$LIST_LENGTH"; i++ )) ; do

		# Populate an array with all required timestamps given in $LIST.
		TIMESTAMPS[$i]=`cat ${LIST} | cut -d"," -f${i}`
		
		# Convert the current timestamp in to seconds of time
		CURRENT_TIME_DAYS=`echo ${TIMESTAMPS[$i]:0:3}`
		CURRENT_TIME_HOURS=`echo ${TIMESTAMPS[$i]:3:2}`
		CURRENT_TIME_MINUTES=`echo ${TIMESTAMPS[$i]:5:2}`
		CURRENT_TIME_SECONDS=`echo ${TIMESTAMPS[$i]:7:2}`
		CURRENT_TIME_ALL_SECONDS=`echo "$CURRENT_TIME_SECONDS + ($CURRENT_TIME_MINUTES * 60) + ($CURRENT_TIME_HOURS * 3600) + ($CURRENT_TIME_DAYS * 86400)" | bc -l`

		# Now calculate each time factor for every timestamp given in the array TIMESTAMPS[].	
		# Since the end time always is greater than the start time, every element in the TIME_FACTORS array will be positive.
		TIME_FACTORS[$i]=`echo "($CURRENT_TIME_ALL_SECONDS - $START_TIME_ALL_SECONDS) / $TRANSECT_DURATION_SEC" | bc -l | awk '{printf "%.6f", $1}'`
				
	done


	##################################################
	#	FIND START AND END EASTINGS/NORTHINGS
	##################################################

	START_EAST=`echo "select $EAST_COL from $TABLE where cat=$START_CAT" | db.select -c`
	START_NORTH=`echo "select $NORTH_COL from $TABLE where cat=$START_CAT" | db.select -c`
	END_EAST=`echo "select $EAST_COL from $TABLE where cat=$END_CAT" | db.select -c`
	END_NORTH=`echo "select $NORTH_COL from $TABLE where cat=$END_CAT" | db.select -c`

	# Calculate the difference between start/end point eastings and northings.
	# If DELTA_EAST is positive, the trackline goes from west to east; if it is negative, 
	# the trackline goes from east to west. Similarly, a positive DELTA_NORTH indicates a
	# south-to-north trackline, while a negative value means a north-to-south one.

	DELTA_EAST=`echo "$END_EAST - $START_EAST" | bc -l | awk '{printf "%.6f", $1}'`		# Delta_East is positive for a west-to-east line.
	DELTA_NORTH=`echo "$END_NORTH - $START_NORTH" | bc -l | awk '{printf "%.6f", $1}'`	# Delta_North is positive for a south-to-north line.


	##################################
	#	INTERPOLATE POSITIONS
	##################################

	for (( i=1; i<="$LIST_LENGTH"; i++ )) ; do

		CURRENT_EAST_FACTOR=`echo "${TIME_FACTORS[$i]} * $DELTA_EAST" | bc -l | awk '{printf "%.6f", $1}'`
		CURRENT_EAST_FACTOR_INT=`echo "$CURRENT_EAST_FACTOR" | awk '{printf "%i", $1}'`
	
		CURRENT_NORTH_FACTOR=`echo "${TIME_FACTORS[$i]} * $DELTA_NORTH" | bc -l | awk '{printf "%.6f", $1}'`
		CURRENT_NORTH_FACTOR_INT=`echo "$CURRENT_NORTH_FACTOR" | awk '{printf "%i", $1}'`
	
	
		CURRENT_EAST=`echo "$START_EAST + $CURRENT_EAST_FACTOR" | bc -l | awk '{printf "%.3f", $1}'` 
		CURRENT_NORTH=`echo "$START_NORTH + $CURRENT_NORTH_FACTOR" | bc -l | awk '{printf "%.3f", $1}'`

		FINAL_EASTINGS[$i]=$CURRENT_EAST
		FINAL_NORTHINGS[$i]=$CURRENT_NORTH

	done
	
	# If -a flag is given, append Geographic coordinates using WGS84 datum to the output table 
	# of the interpolated points as well.

	if [ "$GIS_FLAG_a" -eq 1 ] ; then

		for (( i=1; i<="$LIST_LENGTH"; i++ )) ; do

			echo "${FINAL_EASTINGS[$i]} ${FINAL_NORTHINGS[$i]}" >> TMP_UTM_List.txt
		done

		# Use g.proj to figure out the current projection parameters.
		PROJECTION=`g.proj -j | grep proj | cut -d"=" -f2`
		ZONE=`g.proj -j | grep zone | cut -d"=" -f2`

		# Now convert projected coordinates to Geographic.
		proj -I -f '%.6f' +proj=$PROJECTION +ellps=WGS84 +zone=$ZONE < TMP_UTM_List.txt | awk '{print $1, $2}' > TMP_LatLong_List.txt

		for (( i=1; i<="$LIST_LENGTH"; i++ )) ; do
		
			FINAL_LONGITUDE[$i]=`awk -v COUNTER=$i 'NR==COUNTER {print $1}' < TMP_LatLong_List.txt`
			FINAL_LATITUDE[$i]=`awk -v COUNTER=$i 'NR==COUNTER {print $2}' < TMP_LatLong_List.txt`

		done

		# Populate a text file with the FINAL easting/northings for input to v.in.ascii:

		for (( i=1; i<="$LIST_LENGTH"; i++ )) ; do
	
			echo "${TIMESTAMPS[$i]},${FINAL_EASTINGS[$i]},${FINAL_NORTHINGS[$i]},${FINAL_LONGITUDE[$i]},${FINAL_LATITUDE[$i]}" >> TMP_Coords.txt
		
		done
	
		# Import interpolated points into Grass
		v.in.ascii --o input=TMP_Coords.txt output=$OUTPUT format=point fs="," \
		columns="Timestamp int, Easting double, Northing double, Longitude double, Latitude double" x=2 y=3 cat=0
		

	else

		for (( i=1; i<="$LIST_LENGTH"; i++ )) ; do
	
			echo "${TIMESTAMPS[$i]},${FINAL_EASTINGS[$i]},${FINAL_NORTHINGS[$i]}" >> TMP_Coords.txt

		done

		# Import interpolated points into Grass		
		v.in.ascii --o input=TMP_Coords.txt output=$OUTPUT format=point fs="," columns="Timestamp int, Easting double, Northing double" x=2 y=3 cat=0

	fi

	# Cleanup
	rm -f TMP_*.txt

done

exit 0
