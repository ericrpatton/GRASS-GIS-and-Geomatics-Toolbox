#! /bin/bash
#
############################################################################
#
# MODULE:        r.fragment for Grass 7.x
# 
# AUTHOR:   	 Eric Patton, Geological Survey of Canada (Atlantic)
# 		         <Eric dot Patton at Canada dot ca>
#
# PURPOSE:       To fragment a Grass raster into a user-defined number of
#		         smaller map tiles. The user selects the number of rows and columns	
#		         of a matrix that overlays and partitions the input raster. 
#
# COPYRIGHT:     (c) 2006-2017 by Eric Patton
#
#                This program is free software under the GNU General Public
#                License (>=v3). Read the file COPYING that comes with GRASS
#                for details.
# 
# Last Modified: March 30, 2017
#
#				 - Updated the r.mapcalc call to conform to Gâ–£ass 7 syntax;
#				 also enabled file overwrite flag (--o) by default
#				 (03-30-2017)
#				 - Corrected error in the extraction of northern region bounds
#				 - Restore the initial region, which is not always the maximum
#				 raster input extent. (3-30-3017)
#
#############################################################################

#%Module
#% description: Fragments input raster into a specified number of smaller sections
#%END

#%flag
#% key: v
#% description: Set verbose mode
#%END

#%flag
#% key: r
#% description: Use the current region, not the maximum input raster extent
#%END


#%option 
#% key: input
#% type: string
#% gisprompt: old,cell,raster
#% required: yes
#% description: Input raster filename
#%END

#%option
#% key: rows
#% type: integer
#% required: yes
#% description: Number of rows to divide into the raster
#%END

#%option
#% key: cols
#% type: integer
#% required: yes
#% description: Number of columns to divide into the raster
#%END

# Check to see if GRASS is running; abort if not.
if  [ -z "$GISBASE" ] ; then
	echo "You must be in GRASS GIS to run this program." >2&1
	exit 1
fi

if [ "$1" != "@ARGS_PARSED@" ] ; then
     exec g.parser "$0" "$@"
fi

# Setup clean exit for Ctrl-C or similar breaks.
trap 'echo -e "\n\nUser break or similar caught; Exiting.\n" ; exit 1' 2 3 15

# Check if we have awk.
if [ ! -x "`which awk`" ] ; then
    echo "$SCRIPT: awk required, please install awk or gawk first" 2>&1
    exit 1
fi

# Setting environment, so that awk works properly in all languages.
unset LC_ALL
export LC_NUMERIC=C

# Setup clean exit for Ctrl-C or similar breaks.
trap 'echo -e "\n\nUser break or similar caught! Exiting.\n" ; exit 1' 2 3 15

# Rename input parameters
INPUT=$GIS_OPT_input
ROWS=$GIS_OPT_rows
COLS=$GIS_OPT_cols

# Region-setting behaviour for the -r flag. If the -r is passed, the current
# region settings will be respected; the default behaviour with no flag is to 
# set the region to the maximum extent of the input raster.

if [ "$GIS_FLAG_r" -eq 0 ] ; then

	g.region rast=$INPUT
fi	

g.region save=initial_region --o

# Full extents of input raster; in meters, not pixels.
FULL_EW_EXTENT=`g.region -e | awk 'NR == 2 {printf "%i", $3}'`
FULL_NS_EXTENT=`g.region -e | awk 'NR == 1 {printf "%i", $3}'`

# Initial bounding box of input raster.
FULL_NORTH=`g.region -g | grep "^n=" | cut -d'=' -f2 | awk '{printf "%i", $1}'`
FULL_SOUTH=`g.region -g | grep "^s=" | cut -d'=' -f2 | awk '{printf "%i", $1}'`
FULL_EAST=`g.region -g | grep "e=" | cut -d'=' -f2 | awk '{printf "%i", $1}'`
FULL_WEST=`g.region -g | grep "w=" | cut -d'=' -f2 | awk '{printf "%i", $1}'`

g.region n=$FULL_NORTH s=$FULL_SOUTH e=$FULL_EAST w=$FULL_WEST

# Fragment extents are in meters, not pixels.
# This is how big our moving raster export window will be.
FRAG_NS_EXTENT=$((${FULL_NS_EXTENT} / ${ROWS}))
FRAG_EW_EXTENT=$((${FULL_EW_EXTENT} / ${COLS}))

# Initialize beginning fragment bounds: northwest corner of input raster
# r.fragment will move the export window east until it reaches the end of the input raster's easterly extent.
# Then it will move the window south one row, start at the western edge, and repeat.
START_WESTING=$FULL_WEST
START_NORTHING=$FULL_NORTH
START_EASTING_FLOAT=$((${START_WESTING} + ${FRAG_EW_EXTENT}))
START_EASTING=`echo $START_EASTING_FLOAT | awk '{printf "%0.f", $1}'`
START_SOUTHING_FLOAT=$((${START_NORTHING} - ${FRAG_NS_EXTENT}))
START_SOUTHING=`echo $START_SOUTHING_FLOAT | awk '{printf "%0.f", $1}'`

# Now initialize the export window with START bounds.

g.region n=$START_NORTHING s=$START_SOUTHING e=$START_EASTING w=$START_WESTING

CURRENT_EAST=$START_EASTING
CURRENT_WEST=$START_WESTING
CURRENT_NORTH=$START_NORTHING
CURRENT_SOUTH=$START_SOUTHING

if [ "$GIS_FLAG_v" -eq 1 ] ; then
	echo -e "\nStarting region is:"
	echo "North: $START_NORTHING"
	echo "South: $START_SOUTHING"
	echo " East: $START_EASTING"
	echo " West: $START_WESTING"
	echo -e "\nUsing an East-West extent of $FRAG_EW_EXTENT"
	echo -e "The maximum East-West extent is $FULL_EW_EXTENT\n"
fi

for ((CURRENT_ROW=1; CURRENT_ROW <= $ROWS; CURRENT_ROW++)) ; do
	
	if [ "$GIS_FLAG_v" -eq 1 ] ; then
		echo -e "\n\n=================================================="
	fi

	for ((CURRENT_COL=1; CURRENT_COL<=$COLS; CURRENT_COL++)) ; do
		if [ "$GIS_FLAG_v" -eq 1 ] ; then
			echo -e "\nProcessing map: $INPUT\n"
			echo "Row number:    $CURRENT_ROW"
			echo "Column number: $CURRENT_COL"
		fi
		
		NEWMAP=${INPUT}_${CURRENT_ROW}_${CURRENT_COL}
		
		
		r.mapcalc "$NEWMAP = ${INPUT}" --o
		
		if [ "$GIS_FLAG_v" -eq 1 ] ; then
			echo -e "\nCreated new raster named $NEWMAP.\n"
			echo "--------------------------------------------------"
		fi	 
									
		# Now update the export region; only east and west should change while we're in each column.
		
		CURRENT_EAST=`expr ${CURRENT_EAST} + ${FRAG_EW_EXTENT}`
		CURRENT_WEST=`expr ${CURRENT_WEST} + ${FRAG_EW_EXTENT}`
	
		g.region n=$CURRENT_NORTH s=$CURRENT_SOUTH e=$CURRENT_EAST w=$CURRENT_WEST
		
		if [ "$GIS_FLAG_v" -eq 1 ] ; then
			echo -e "\nUpdated current region to:"
			echo "North: $CURRENT_NORTH"
			echo "South: $CURRENT_SOUTH"
			echo " East: $CURRENT_EAST"
			echo " West: $CURRENT_WEST"
		fi
		

		if [ "$CURRENT_EAST" -gt "$FULL_EAST" ] ; then
			if [ "$GIS_FLAG_v" -eq 1 ] ; then
				echo -e "\nReached the maximum east extent of $INPUT."
			fi

			break 1
		fi
			

		
	done

CURRENT_NORTH=$(($CURRENT_NORTH-$FRAG_NS_EXTENT))
CURRENT_SOUTH=$(($CURRENT_SOUTH-$FRAG_NS_EXTENT))
CURRENT_WEST=$START_WESTING
CURRENT_EAST=$START_EASTING
	
g.region n=$CURRENT_NORTH s=$CURRENT_SOUTH e=$CURRENT_EAST w=$CURRENT_WEST

	
done

# Restore the region to the initial region we began with
g.region region=initial_region

if [ "$GIS_FLAG_v" -eq 1 ] ; then
	echo -e "\n================================================="
	echo -e "\n\nFinished.\n"
fi

exit 0
