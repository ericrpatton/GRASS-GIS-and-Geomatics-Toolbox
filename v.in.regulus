#! /bin/sh
#
############################################################################
#
# MODULE:        v.in.regulus for Grass 6.0/6.1
# 
# AUTHOR:   	 Eric Patton, Geological Survey of Canada (Atlantic) 
# 
# PURPOSE:       To import Regulus marker files into Grass vector format.
#		 
# 
# COPYRIGHT:     Copyright (C) 2006,2007 by Eric Patton
#
#                This program is free software under the GNU General Public
#                License (>=v3). Read the file COPYING that comes with GRASS
#                for details.
# 
# Last Modified: September 18, 2007
# 
#############################################################################

#%Module
#% description: Imports a Regulus marker file into Grass vector format. 
#%END

#%option
#% key: input
#% type: string
#% gisprompt: old_file,file,input
#% description: Name of Regulus marker file to import.
#% required : yes 
#%END

#%option
#% key: output
#% type: string
#% gisprompt: new,vector,vector
#% description: Name of output Grass vector.
#% required : no 
#%END

#%option
#% key: zone
#% type: integer
#% description: UTM Zone to be used during projection
#% answer: 20
#% options: 10,11,12,13,14,15,16,17,18,19,20,21,22
#% required: yes
#%END

SCRIPT=`basename $0`

if  [ -z "$GISBASE" ] ; then
    echo "You must be in GRASS GIS to run this program." 2>&1
    exit 1
fi

if [ "$1" != "@ARGS_PARSED@" ] ; then
     exec g.parser "$0" "$@"
fi

# Check if we have awk.
if [ ! -x "`which awk`" ] ; then
    echo "$SCRIPT: awk required, please install awk or gawk first" 2>&1
    exit 1
fi

# Setting environment, so that awk works properly in all languages.
unset LC_ALL
export LC_NUMERIC=C

# Check if we have proj.
if [ ! -x "`which proj`" ] ; then
    echo "$SCRIPT: proj4 required, please install proj first" 2>&1
    exit 1
fi

# Capture environment variables.
eval `g.gisenv`
: ${GISDBASE?} ${GISBASE?} ${LOCATION_NAME?} ${MAPSET?}
LOCATION=$GISDBASE/$LOCATION_NAME/$MAPSET

# Cleanup procedure.
cleanup()
{ 
  rm -f vect_temp*	
  eval `g.findfile element=vector mapset=${MAPSET} file=${OUTPUT}`
  VECT_CHECK=$file

  if [ -n $VECT_CHECK ] ; then
	g.remove vect=$OUTPUT > /dev/null
  fi
}

# Exit procedure for user breaks.
exitprocedure()
{ 
 echo ""
 echo "Exiting..."
 echo ""
 cleanup
}

# Trap Ctrl-C and similar breaks from user
trap "exitprocedure ; exit 0" 2 3 15 

# Rename parameters.
INPUT=$GIS_OPT_input
ZONE=$GIS_OPT_zone

# Output will adopt same name as input if no other name is given.
if [ -z "$GIS_OPT_output" ] ; then
	
	OUTPUT=`basename $INPUT .csv`
else
	OUTPUT=${GIS_OPT_output}	

fi

# COVERT TO GRASS FORMAT
#
# Note: Keep an eye on how ICAN chooses to delimit their Marker files.
# I'm assuming comma-delimited format and hard-coding that here, but that
# can easily change without warning in the future. 
# Project Regulus coordinates into UTM Zone $ZONE using proj, and insert an error message
# in the output file for any bad lines.

awk '{print $4, $5, $3, $2, $15, $16}' ${INPUT} | proj -e 'Error' -r -f '%.3f' +proj=utm +ellps=WGS84 +zone=$ZONE > vect_temp_utm

# Prints: Latitude, Longitude, category, Station ID, Date, and Time.
# Regulus coordinates are stored in geographic, WGS84. Since this is virtually a 
# universal truth, I've hardcoded a geographic-to-UTM conversion routine here. If
# it turns out that Regulus input changes to something other than geographic, I'll
# modify this script at that time.

awk '{print $1, $2, $3, $4, $5, $6}' vect_temp_utm | sed s/\"//g > vect_temp_utm_formatted

PROJ_ERRORS=`cat vect_temp_utm_formatted | grep "Error" | wc -l`

if [ "$PROJ_ERRORS" -gt 0 ] ; then
	echo ""
	echo "$SCRIPT: Error occurred during projection of marker file. Re-check input coordinates."
	exitprocedure
	exit 1
fi

# Check if database parameters are set for this Location.

DRIVER=`db.connect -p | grep driver | cut -d":" -f2`
DB_CHECK=`db.connect -p | grep database | cut -d":" -f2 | sed s/\(// | sed s/\)//`
DB_DIR=$LOCATION/dbf

if [ ! -d "$DB_DIR" ] ; then

	mkdir $DB_DIR

	if [ $? -eq 1 ] ; then
		echo "$SCRIPT: Unable to create new dbf directory in $LOCATION."
		exitprocedure
		exit 1
	else
		echo ""
		echo "Created new database directory in $DB_DIR."
		echo ""	
	fi

fi


if [ "$DRIVER" != "dbf" ] ; then

	db.connect driver=dbf database=$DB_DIR
fi

if [ "$DB_CHECK" == "null" ] ; then
	
	db.connect driver=dbf database=$DB_DIR
fi

# If output from proj is clean, import to Grass vector format. 

v.in.ascii input=vect_temp_utm_formatted output=${OUTPUT} fs=" " columns='x double, y double, cat int, Station_ID varchar(12), Day_of_Year varchar(12), UTC varchar(12)' x=1 y=2 cat=3 --o


# Cleanup
if [ $? -eq 1 ] ; then
	exit 1
else
	rm -f vect_temp*
	exit 0
fi
