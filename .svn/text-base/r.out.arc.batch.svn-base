#!/bin/sh
#
#######################################################################################
#
# MODULE:	r.out.arc.batch for GRASS 6.0 
# AUTHOR(S):	Eric Patton
#		 
# PURPOSE:	To batch export multiple Grass rasters into ESRI Arc Grid ascii format
# COPYRIGHT:	(C) 2006 by the GRASS Development Team
#
#		This program is free software under the GNU General Public
#		License (>=v2). Read the file COPYING that comes with GRASS
#		for details.
# 
# DATE LAST:    Janaury 16, 2006
# MODIFIED
######################################################################################

# Check to see if we're in Grass.
if  [ -z $GISBASE ] ; then
 echo "You must be in GRASS GIS to run this program."
 exit 1
fi   

# Prompt for listing.
echo -e "\nWould you like a listing of rasters in this mapset? (y/n): " 
read ANSWER
if [ "$ANSWER" = "y" -o "$ANSWER" = "Y" ] ; then
	g.list type=rast
else
	break	
fi

# Prompt for search pattern and provide clean exit.
echo -e "\nEnter the raster search pattern for g.mlist or type \"q\" to quit: "
read PATTERN
if [ "$PATTERN" = "q" -o "$PATTERN" = "Q" ] ; then
	exit 0
else	
	break

fi

# Not sure if there's a better way to check if any rasters
# match the search pattern, but here goes:
matches=`g.mlist type=rast pattern="$PATTERN" | wc -l`

# Prompt user for a valid search string until a wildcard match has been made.
while [ "$matches" -eq 0 ] ; do
 	echo "Specified search string not found! Try another search expression, or type \"q\" to quit: "
 	read PATTERN
	
	if [ "$PATTERN" = "q" -o "$PATTERN" = "Q" ] ; then
 		exit 0
	fi
	matches=`g.mlist type=rast pattern="$PATTERN" | wc -l`
done    

# Now that a valid search pattern has been entered, list the candidate maps
# and prompt for final confirmation for export.
echo -e "\n========================================"
echo "`g.mlist type=rast pattern=$PATTERN`"
echo -e "========================================"

echo -e "\nPattern has matched $matches rasters listed above flagged for export. Proceed? (y/n): "
	read CONFIRM
	if [ $CONFIRM = "y" -o $CONFIRM = "Y" ] ; then
		break
	else 
		echo "Exiting - Goodbye!"
		exit 0
	fi

# Get output grid precision.
echo -e "Enter the decimal-place precision required:  "
read PRECISION
echo "Exporting..."

# Now export each raster in sequence.
for MAP in `g.mlist type=rast pattern="$PATTERN"`; do  
	echo "Setting region to $MAP"
	g.region rast=$MAP
	echo -e "Processing $map..." 
	r.out.arc input=$MAP output=$MAP.asc dp=$PRECISION
	echo -e "Export Completed.\n"
done

echo Finished.

exit 0
