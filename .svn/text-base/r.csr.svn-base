#! /bin/sh
#
############################################################################
#
# MODULE:        r.csr for Grass 6.0/6.1
# 
# AUTHOR(S):   	 Eric Patton
# 
# PURPOSE:       To allow the batch creation of coloured, shaded-relief 
#		 Grass rasters, optionally with tiff export and tar/gzip 
#		 archival. Uses shading defaults of 45alt, 315az, 20x. 
# 
# COPYRIGHT:     (C) 2006 by the GRASS Development Team
#
#                This program is free software under the GNU General Public
#                License (>=v2). Read the file COPYING that comes with GRASS
#                for details.
# 
# Last Modified: March 18, 2006
#
#############################################################################
#
#%Module
#% description: Single or batch creation of coloured, shaded-relief rasters, optionally with tiff export and archival using tar/gzip.
#%END

#%flag
#% key: a
#% description: Create gzipped tar archive of output tiffs.
#%END

#%flag
#% key: s
#% description: Skip shaded-map creation (expects shade map named MAP_shade).
#%END

#%flag
#% key: t
#% description: Output tiff image and worldfile of coloured, shaded-relief raster.
#%END

#%flag
#% key: v
#% description: Set verbose mode
#%END
	
#%option 
#% key: map
#% type: string
#% gisprompt: old,cell,raster
#% required: yes
#% description: Input raster filename or wildcard seach pattern
#%END

#%option
#% key: altitude
#% type: integer
#%  required : no
#%  answer: 45
#% description: Altitude of the sun in degrees above the horizon (must be 1-89)
#%END

#%option
#%  key: azimuth
#%  type: integer
#%  description: Azimuth of the sun in degrees to the east of north (must be 0-360)
#%  required : no
#%  answer: 315
#%END

#%option
#%  key: zmult    
#%  type: double
#%  description: Factor for exaggerating relief (default=10)
#%  required : no
#%  answer: 10
#%END

#%option
#% key: rules
#% type: string
#% description: Name of rules file in current directory containing rules for r.colors portion
#% required: no
#%END

if  [ -z "$GISBASE" ] ; then
    echo "You must be in GRASS GIS to run this program." >2&1
    exit 1
fi

if [ "$1" != "@ARGS_PARSED@" ] ; then
     exec g.parser "$0" "$@"
fi

SCRIPT=`basename $0`

# Setup clean exit for Ctrl-C or similar breaks.
trap 'echo -e "\n\nUser break or similar caught; Exiting.\n" ; exit 1' 2 3 15

# Set verbosity
if [ "$GIS_FLAG_v" -eq 1 ] ; then
	VERBOSE=1
else
	VERBOSE=0	
fi



# Check if tar is installed, only if -a flag was passed.
if [ "$GIS_FLAG_a" -eq 1 ] ; then
	if [ ! -x "`which tar`" ] ; then
		echo "Tar is not found on the system! Please install first or disable -a flag." >2&1
		exit 1
	fi
fi

# Capture GISBASE, and MAPSET. 
eval `g.gisenv`
: ${GISBASE?} ${MAPSET?}

ALTITUDE=$GIS_OPT_altitude
AZIMUTH=$GIS_OPT_azimuth
ZMULT=$GIS_OPT_zmult
PATTERN=$GIS_OPT_map
RULES=$GIS_OPT_rules


# Not sure if there's a better way to check if any rasters
# match the search pattern, but here goes:
MATCHES=`g.mlist type=rast pattern="$PATTERN" | wc -l`

# Abort if no matches are found.
if [ "$MATCHES" -eq 0 ] ; then
 	echo "$SCRIPT:No rasters matched the search pattern!" >2&1
 	exit 1
fi	
	

# Now iterate through each match of PATTERN and do colour raster,shade, and combine.
for MAP in `g.mlist type=rast pattern="$PATTERN"` ; do
	
	g.region rast=$MAP
	
	if [ "$VERBOSE" -eq 1 ] ; then
	
		echo -e "\n\n\n======================================"
		echo -e "\nr.csr"
		echo -e "\nProcessing input map $MAP..."
		echo -e "\n\nFormatting check begun..."
	
	fi
	
	# Check filename of raster to make sure no period exists in filename.
	# r.shaded.relief, r.composite and r.his don't accept periods in the input names.
	
	NAME_CHECK=`echo "$MAP" | grep "\."`

	if [ -n "$NAME_CHECK" ] ; then
	
		if [ "$VERBOSE" -eq 1 ] ; then		
			echo -e "\nA period (".") exists in the input raster filename."
			echo -e "Replacing period with an underscore so r.composite will execute."
		fi
			
		NEW_MAP=`echo "$MAP" | tr "." "_"`

		g.findfile element=cell mapset=${MAPSET} file=${NEW_MAP}
		
		# If our new filename already exists, remove it; otherwise g.rename complains
		if [ -n "$file" ] ; then
			g.remove rast=$NEW_MAP
		fi	
		
		g.rename rast=${MAP},${NEW_MAP}
		
		if [ $? -eq 0 ] ; then
			if [ "$VERBOSE" -eq 1 ] ; then			
				echo -e "\nSuccessfully renamed $MAP to $NEW_MAP..."
			fi
			MAP=$NEW_MAP
		else
			echo -e "\n$SCRIPT: Error: Unable to rename $MAP to $NEW_MAP. Exiting." >2&1
			exit 1
		fi
	
	else 
		if [ "$VERBOSE" -eq 1 ] ; then
			echo -e "\n\nFilename looks OK."
		fi
	fi
	

	RED=${MAP}_r
	GREEN=${MAP}_g
	BLUE=${MAP}_b
	SHADE=${MAP}_shade
	
	# Procedure for the -s flag; skip shade creation		
	
	if [ "$VERBOSE" -eq 1 ] ; then
		echo -e "\n\n--------------------------------------"
	fi
	

	if [ "$GIS_FLAG_s" -eq 0 ] ; then
		if [ "$VERBOSE" -eq 1 ] ; then
			echo -e "\nr.shaded.relief\n"
		fi

		r.shaded.relief map=$MAP altitude=$ALTITUDE azimuth=$AZIMUTH zmult=$ZMULT
	
		if [ $? -ne 0 ] ; then
			echo -e "\n$SCRIPT: r.shaded.relief was unsuccessful. Check if shade already exists." >2&1
			
			eval `g.findfile element=cell mapset=$MAPSET file=${MAP}_shade`
			
			if [ -n "$file" ] ; then
				g.remove rast=${MAP}_shade
				exit 1
			else
				exit 1
			fi

		fi

	else 
		if [ "$VERBOSE" -eq 1 ] ; then
			echo -e "\nThe shaded-relief option has been skipped (-s flag). Note that"
			echo -e "r.his still expects a shaded-relief file named ${MAP}_shade to"
			echo -e "combine with the colour map $MAP."
		fi
        
	fi


	if [ "$VERBOSE" -eq 1 ] ; then
		echo -e "\n\n--------------------------------------"
		echo -e "\nCombining colours with shade - r.his and r.composite\n"	
		echo "r.his will use $MAP and $SHADE."
	fi
	
	# Check if any maps named $MAP_r/g/b exist, and remove them if they do.
	# r.his will not complete if these maps already exist.

	eval `g.findfile element=cell mapset=$MAPSET file=$RED`
	RED_CHECK=$file
	eval `g.findfile element=cell mapset=$MAPSET file=$GREEN`
	GREEN_CHECK=$file
	eval `g.findfile element=cell mapset=$MAPSET file=$BLUE`
	BLUE_CHECK=$file

	
	if [ -n "$RED_CHECK" -o -n "$GREEN_CHECK" -o -n "$BLUE_CHECK" ] ; then
		echo "Overwriting old rgb maps..."
		g.remove rast=$RED,$GREEN,$BLUE
			
	else
		if [ "$VERBOSE" -eq 1 ] ; then
			echo "No RGB overwrite necessary..."
		fi
			
	fi

	if [ "$VERBOSE" -eq 1 ] ; then
		echo -e "\nCreating new csr maps..."
	fi

	# Use a default rainbow colour map if no rules file is given
	if [ -z "$GIS_OPT_rules" ] ; then
		if [ "$VERBOSE" -eq 1 ] ; then
			r.colors map=$MAP color=rainbow
		else
			r.colors -q map=$MAP color=rainbow
		fi
	else
		if [ "$VERBOSE" -eq 1 ] ; then
			cat $RULES | r.colors map=$MAP color=rules
		else
			r.colors -q map=$MAP color=rainbow
		fi
	fi

	r.his -n h_map=$MAP i_map=$SHADE r_map=$RED g_map=$GREEN b_map=$BLUE

	# Confirmation that r.his has actually created 3 rgb maps. 
	eval `g.findfile element=cell mapset=$MAPSET file=${RED}`
	RED_CHECK=$file
	
	eval `g.findfile element=cell mapset=$MAPSET file=${GREEN}`
	GREEN_CHECK=$file

	eval `g.findfile element=cell mapset=$MAPSET file=${BLUE}`
	BLUE_CHECK=$file
	
	if [ -z "$RED_CHECK" -o -z "$GREEN_CHECK" -o -z "$BLUE_CHECK" ] ; then
		echo -e "\n$SCRIPT: r.his failed to create one or more RGB maps. Exiting." >2&1
		echo -e "\nCleaning any RGB maps..."
		g.remove rast=$RED,$GREEN,$BLUE
		exit 1
	else 
		if [ "$VERBOSE" -eq 1 ] ; then
			echo "All three RGB maps created."
		fi
	fi

	
	if [ "$VERBOSE" -eq 1 ] ; then
		echo -e "\nCombining RBG maps $RED, $GREEN, $BLUE..."
	fi

	COMBINED=${MAP}_shade_comb
	

	# Overwrite old coloured shade-relief map if it exists.
	eval `g.findfile element=cell mapset=$MAPSET file=${COMBINED}`    
	
	if [ -n "$file" ] ; then
		if [ "$VERBOSE" -eq 1 ] ; then
			echo "Overwriting old csr map..."
		fi		
		echo ""	
		g.remove rast=${COMBINED}
	fi

	r.composite -d red=${RED} green=${GREEN} blue=${BLUE} output=${COMBINED}
		
	if [ $? -ne 0 ] ; then
		echo -e "\n$SCRIPT: Error occurred during r.composite export. Exiting." >2&1
		exit 1
	else
		if [ "$VERBOSE" -eq 1 ] ; then
			echo -e "\nProduced coloured, shaded-relief image ${COMBINED}."
		fi
	fi
	
	# Procedures for exporting tiffs and tarfiles.
	if [ "$GIS_FLAG_t" -eq 1 ] ; then
		
		if [ "$VERBOSE" -eq 1 ] ; then
			echo -e "\n--------------------------------------"	
			echo -e "\nExport Section\n"
			r.out.tiff -tv input=${COMBINED} output=${COMBINED}
		
		else
			r.out.tiff -t input=${COMBINED} output=${COMBINED}
		
		fi	
	
					
		if [ "$GIS_FLAG_a" -eq 1 ] ; then
			if [ "$VERBOSE" -eq 1 ] ; then
				echo -n -e "Creating gzipped tar archive of geotiff output..."
			fi
			
			tar czvf ${COMBINED}.tar.gz ${COMBINED}.t??
			
			if [ $? -ne 0 ] ; then
				echo -e "\n$SCRIPT: Error: Could not create tar file. Exiting..." >2&1
				exit 1
			else	
				if [ "$VERBOSE" -eq 1 ] ; then
					echo -e "\nCreated tarred, gzipped package ${COMBINED}.tar.gz in $PWD."
				fi
				rm -f ${COMBINED}.t??
			fi			

		fi

	fi
	
	# Cleanup RGB tempfiles.

	if [ "$VERBOSE" -eq 1 ] ; then
		echo -e "\n\n--------------------------------------"
		echo -e "\nCleaning up rgb files...\n"
	fi

	g.remove rast=$RED,$GREEN,$BLUE
	
	echo -e "\n--------------------------------------\n"

		
done

exit 0
