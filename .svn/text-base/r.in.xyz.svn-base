#! /bin/sh
#
############################################################################
#
# MODULE:        r.in.xyz for Grass 6.0/6.1
# 
# AUTHOR(S):   	 Eric Patton
# 
# PURPOSE:       Imports xyz ascii files using GMT's xyz2grd program
# 
# COPYRIGHT:     (C) 2006 by the GRASS Development Team
#
#                This program is free software under the GNU General Public
#                License (>=v2). Read the file COPYING that comes with GRASS
#                for details.
# 
# Last Modified: March 22, 2006
#
#############################################################################
#
#%Module
#% description: Imports xyz ascii files using GMT's xyz2grd program.
#%END

#%flag
#% key: v
#% description: Set verbose mode
#%END

#%option
#% key: input
#% type: string
#% gisprompt: old,cell,raster
#% required: yes
#% description: Name of input xyz ascii file
#%END

#%option
#% key: output
#% type: string
#% required: no
#% description: Name of output Grass raster
#%END

#%option
#% key: null
#% type: integer
#% required: no
#% answer: 9999
#% description: Value to set null in output raster
#%END

#%option
#% key: bytes
#% type: integer
#% required: no
#% options: 1,2,4
#% answer: 4
#%END

#%option
#% key: res
#% type: integer
#% required: yes
#% description: Resolution of input data
#%END

if  [ -z "$GISBASE" ] ; then
    echo "You must be in GRASS GIS to run this program." >2&1
    exit 1
fi

if [ "$1" != "@ARGS_PARSED@" ] ; then
     exec g.parser "$0" "$@"
fi

SCRIPT=`basename $0`

# Check if we have GMT program minmax.
if [ ! -x "`which minmax`" ] ; then
    echo "$SCRIPT: minmax required, please install GMT first." 2>&1
    exit 1
fi

# Check if we have xzy2grd
if [ ! -x "`which xyz2grd`" ] ; then
    echo "$SCRIPT: xyz2grd required, please install GMT first." 2>&1
    exit 1
fi

# Setup clean exit for Ctrl-C or similar breaks.
trap 'echo -e "\n\nUser break or similar caught; Exiting.\n" ; exit 1' 2 3 15

# Set verbosity
if [ "$GIS_FLAG_v" -eq 1 ] ; then
	VERBOSE=1
else
	VERBOSE=0	
fi

INPUT="$GIS_OPT_input"
OUTPUT="$GIS_OPT_output"
NULL="$GIS_OPT_null"
RES="$GIS_OPT_res"


if [ -z "$OUTPUT" ] ; then
	OUTPUT="$INPUT".grd
fi



if [ "$VERBOSE" -eq 1 ] ; then
	echo -e "\nCalculating min/max bounds of input dataset. Standby...\n"
	BOUNDS=`minmax "$INPUT" -I"$RES"`
	echo -e "Minmax has extracted the following bounds: $BOUNDS\n"

else
	BOUNDS=`minmax "$INPUT" -I"$RES"`

fi


# Now run GMT xyz2grd, using our parameters
if [ "$VERBOSE" -eq 1 ] ; then
	xyz2grd "$INPUT" -G${OUTPUT}=1 "$BOUNDS" -N${NULL} -V -I"$RES"

else
	
	xyz2grd "$INPUT" -G"${OUTPUT}"=1 "$BOUNDS" -N${NULL} -I"$RES"

fi	

r.in.bin -fh input="$OUTPUT" output="$OUTPUT" bytes="$BYTES" anull="$NULL"

exit 0 





























